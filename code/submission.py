import os

import pandas as pd
from git import Repo
from github import Auth, Github

from config import ROOT
from src.forecasting import generate_forecasts
from src.realtime_utils import get_preceding_thursday, wait_for_data, download_latest_data
from src.r_utils import detect_rscript
import subprocess

# Locate Rscript matching the required version
RSCRIPT = detect_rscript()

# --- CONFIG ---
forecast_date = str(get_preceding_thursday(pd.Timestamp.now().date()).date())
COMMIT_MSG = f"Add KIT-LightGBM and KIT-TSMixer forecasts for {forecast_date}"

UPSTREAM_REPO = "KITmetricslab/RESPINOW-Hub"  # upstream
TARGET_REPO = "dwolffram/RESPINOW-Hub"  # your fork
BASE = "main"
BRANCH = f"submission/{forecast_date}"

repo = Repo(ROOT)


# --- Wait until data is updated ---
wait_for_data(interval_min=30, max_wait_hours=24)

# --- Download data ---
download_latest_data()


# --- Generate nowcasts ---
subprocess.run(
    [
        RSCRIPT,
        "--vanilla",
        "-e",
        f'setwd("{(ROOT / "r").as_posix()}"); '
        'renv::activate(); '
        'renv::restore(prompt = FALSE); '
        'source("nowcasting/nowcasting.R")'
    ],
    cwd=ROOT,
    check=True,
)


# --- Commit nowcasts locally (GitPython) ---
repo.git.add("nowcasts")
if repo.is_dirty():
    repo.index.commit(f"Add nowcasts for {forecast_date}")
    repo.remote("origin").push()
    print("✅ Committed and pushed nowcasts to RESPINOW-realtime repository.")
else:
    print("⚠️ No new or modified nowcast files detected — nothing to commit.")


# --- Generate forecasts ---
generate_forecasts("lightgbm", forecast_date, data_mode="no_covariates", modes="coupling")
generate_forecasts("tsmixer", forecast_date, data_mode="no_covariates", modes="coupling")


# --- Commit forecasts locally (GitPython) ---
repo.git.add("forecasts")
if repo.is_dirty():
    repo.index.commit(COMMIT_MSG)
    repo.remote("origin").push()
    print("✅ Committed and pushed forecasts to RESPINOW-realtime repository.")
else:
    print("⚠️ No new or modified forecast files detected — nothing to commit.")


# --- Submit to Hub (PyGithub) ---
auth = Auth.Token(os.environ["GITHUB_TOKEN"])
g = Github(auth=auth)

dst_repo = g.get_repo(TARGET_REPO)
upstream = g.get_repo(UPSTREAM_REPO)

# create temp branch in your fork
base_ref = dst_repo.get_git_ref(f"heads/{BASE}")
dst_repo.create_git_ref(ref=f"refs/heads/{BRANCH}", sha=base_ref.object.sha)

# upload both CSVs
for model, name in [("lightgbm", "KIT-LightGBM"), ("tsmixer", "KIT-TSMixer")]:
    file = (
        ROOT
        / f"forecasts/{model}-no_covariates-coupling/{forecast_date}-icosari-sari-{model}-no_covariates-coupling.csv"
    )
    dest_path = f"submissions/icosari/sari/{name}/{forecast_date}-icosari-sari-{name}.csv"
    content = file.read_text(encoding="utf-8")
    dst_repo.create_file(
        path=dest_path,
        message=f"Add {name} forecasts for {forecast_date}",
        content=content,
        branch=BRANCH,
    )

# open PR

body = (
    f"Automated forecast submission from [RESPINOW-realtime](https://github.com/dwolffram/RESPINOW-realtime).\n\n"
    f"This pull request adds the forecasts for {forecast_date} generated by "
    f"the **KIT-LightGBM** and **KIT-TSMixer** models."
)

pr = upstream.create_pull(
    title=COMMIT_MSG,
    body=body,
    head=f"{dst_repo.owner.login}:{BRANCH}",
    base=BASE,
)
print(f"✅ PR created: {pr.html_url}")
